import java.util.Properties;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.LongSerializer;
import org.apache.kafka.common.serialization.StringSerializer;

import io.jaegertracing.Configuration;
import io.jaegertracing.Configuration.ReporterConfiguration;
import io.jaegertracing.Configuration.SamplerConfiguration;
import io.jaegertracing.Configuration.SenderConfiguration;
import io.jaegertracing.internal.JaegerTracer;
import io.opentracing.Tracer;
import io.opentracing.contrib.kafka.TracingKafkaProducer;
import io.opentracing.util.GlobalTracer;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private final static String BOOTSTRAP_SERVERS = "localhost:9092";
    private final static String SINK_TOPIC = "serviceA-sink";
    private final static String JAEGER_AGENT_HOST = "localhost";

    public String getGreeting() {
        return "Starting ServiceA";
    }

    private static Producer<Integer, String> createProducer() {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS);
        props.put(ProducerConfig.CLIENT_ID_CONFIG, "KafkaExampleProducer");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        return new KafkaProducer<>(props);
    }

    private static Producer<Integer, String> getTracedProducer(Producer<Integer, String> producer) {
        TracingKafkaProducer<Integer, String> tracingProducer = new TracingKafkaProducer<>(producer,
                GlobalTracer.get());
        return tracingProducer;
    }

    public static Tracer initTracer(String service) {
        return new Configuration(service).withSampler(new SamplerConfiguration().withType("const").withParam(1))
                .withReporter(new ReporterConfiguration()
                        .withSender((new SenderConfiguration()).withAgentHost(JAEGER_AGENT_HOST)))
                .getTracer();
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        Tracer tracer = new JaegerTracer.Builder("myServiceName").build();
        GlobalTracer.register(tracer);

        Producer<Integer, String> producer = getTracedProducer(createProducer());

        try {
            while (true) {
                String randomString = UUID.randomUUID().toString();
                final ProducerRecord<Integer, String> record = new ProducerRecord<>(SINK_TOPIC, null,
                        "Hello from ServiceA uuid: " + randomString);

                RecordMetadata metadata;
                try {
                    metadata = producer.send(record).get();
                    System.out.printf("sent record(key=%s value=%s) meta(partition=%d,offset=%d)\n", record.key(),
                            record.value(), metadata.partition(), metadata.offset());
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (ExecutionException e) {
                    e.printStackTrace();
                }
            }

        } finally {
            producer.flush();
            producer.close();
        }
    }
}
